// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TodoItem renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TodoItem
    index={0}
    item={
      Object {
        "isActive": false,
        "isComplete": false,
        "isDeleteInGrace": false,
        "isDeleted": false,
        "isSuccess": false,
        "title": "test",
      }
    }
    update={
      [MockFunction] {
        "calls": Array [
          Array [
            0,
            "success",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "alignItems": "center",
      "children": Array [
        <WithStyles(Grid)
          item={true}
        >
          <React.Fragment>
             
            test
             
          </React.Fragment>
        </WithStyles(Grid)>,
        <WithStyles(Grid)
          item={true}
        >
          <WithStyles(Button)
            className="successButton"
            color="primary"
            onClick={[Function]}
            variant="text"
          >
            Successful
             
          </WithStyles(Button)>
        </WithStyles(Grid)>,
        <WithStyles(Grid)
          item={true}
        >
          <WithStyles(Button)
            color="primary"
            onClick={[Function]}
            variant="text"
          >
            Complete
             
          </WithStyles(Button)>
        </WithStyles(Grid)>,
        <WithStyles(Grid)
          item={true}
        >
          <WithStyles(Button)
            color="primary"
            onClick={[Function]}
            variant="text"
          >
            Activate
             
          </WithStyles(Button)>
        </WithStyles(Grid)>,
        <WithStyles(Grid)
          item={true}
        >
          <WithStyles(Button)
            color="primary"
            onClick={[Function]}
            variant="text"
          >
            Delete
          </WithStyles(Button)>
        </WithStyles(Grid)>,
      ],
      "className": "item",
      "container": true,
      "direction": "row",
      "justify": "space-evenly",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <React.Fragment>
             
            test
             
          </React.Fragment>,
          "item": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              " ",
              "test",
              " ",
            ],
          },
          "ref": null,
          "rendered": Array [
            " ",
            "test",
            " ",
          ],
          "type": Symbol(react.fragment),
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Button)
            className="successButton"
            color="primary"
            onClick={[Function]}
            variant="text"
          >
            Successful
             
          </WithStyles(Button)>,
          "item": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              "Successful",
              " ",
            ],
            "className": "successButton",
            "color": "primary",
            "onClick": [Function],
            "variant": "text",
          },
          "ref": null,
          "rendered": Array [
            "Successful",
            " ",
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Button)
            color="primary"
            onClick={[Function]}
            variant="text"
          >
            Complete
             
          </WithStyles(Button)>,
          "item": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              "Complete",
              " ",
            ],
            "color": "primary",
            "onClick": [Function],
            "variant": "text",
          },
          "ref": null,
          "rendered": Array [
            "Complete",
            " ",
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Button)
            color="primary"
            onClick={[Function]}
            variant="text"
          >
            Activate
             
          </WithStyles(Button)>,
          "item": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              "Activate",
              " ",
            ],
            "color": "primary",
            "onClick": [Function],
            "variant": "text",
          },
          "ref": null,
          "rendered": Array [
            "Activate",
            " ",
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Button)
            color="primary"
            onClick={[Function]}
            variant="text"
          >
            Delete
          </WithStyles(Button)>,
          "item": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Delete",
            "color": "primary",
            "onClick": [Function],
            "variant": "text",
          },
          "ref": null,
          "rendered": "Delete",
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "alignItems": "center",
        "children": Array [
          <WithStyles(Grid)
            item={true}
          >
            <React.Fragment>
               
              test
               
            </React.Fragment>
          </WithStyles(Grid)>,
          <WithStyles(Grid)
            item={true}
          >
            <WithStyles(Button)
              className="successButton"
              color="primary"
              onClick={[Function]}
              variant="text"
            >
              Successful
               
            </WithStyles(Button)>
          </WithStyles(Grid)>,
          <WithStyles(Grid)
            item={true}
          >
            <WithStyles(Button)
              color="primary"
              onClick={[Function]}
              variant="text"
            >
              Complete
               
            </WithStyles(Button)>
          </WithStyles(Grid)>,
          <WithStyles(Grid)
            item={true}
          >
            <WithStyles(Button)
              color="primary"
              onClick={[Function]}
              variant="text"
            >
              Activate
               
            </WithStyles(Button)>
          </WithStyles(Grid)>,
          <WithStyles(Grid)
            item={true}
          >
            <WithStyles(Button)
              color="primary"
              onClick={[Function]}
              variant="text"
            >
              Delete
            </WithStyles(Button)>
          </WithStyles(Grid)>,
        ],
        "className": "item",
        "container": true,
        "direction": "row",
        "justify": "space-evenly",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <React.Fragment>
               
              test
               
            </React.Fragment>,
            "item": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                " ",
                "test",
                " ",
              ],
            },
            "ref": null,
            "rendered": Array [
              " ",
              "test",
              " ",
            ],
            "type": Symbol(react.fragment),
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Button)
              className="successButton"
              color="primary"
              onClick={[Function]}
              variant="text"
            >
              Successful
               
            </WithStyles(Button)>,
            "item": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                "Successful",
                " ",
              ],
              "className": "successButton",
              "color": "primary",
              "onClick": [Function],
              "variant": "text",
            },
            "ref": null,
            "rendered": Array [
              "Successful",
              " ",
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Button)
              color="primary"
              onClick={[Function]}
              variant="text"
            >
              Complete
               
            </WithStyles(Button)>,
            "item": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                "Complete",
                " ",
              ],
              "color": "primary",
              "onClick": [Function],
              "variant": "text",
            },
            "ref": null,
            "rendered": Array [
              "Complete",
              " ",
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Button)
              color="primary"
              onClick={[Function]}
              variant="text"
            >
              Activate
               
            </WithStyles(Button)>,
            "item": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                "Activate",
                " ",
              ],
              "color": "primary",
              "onClick": [Function],
              "variant": "text",
            },
            "ref": null,
            "rendered": Array [
              "Activate",
              " ",
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Button)
              color="primary"
              onClick={[Function]}
              variant="text"
            >
              Delete
            </WithStyles(Button)>,
            "item": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Delete",
              "color": "primary",
              "onClick": [Function],
              "variant": "text",
            },
            "ref": null,
            "rendered": "Delete",
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
